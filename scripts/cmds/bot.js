const axios = require('axios');

const baseApiUrl = () => 'https://www.noobs-api.rf.gd/dipto';

const prefixes = [
  "bby", "janu", "‡¶¨‡¶æ‡¶¨‡ßÅ", "babu", "bbu", "botli", "bot",
  "baby", "‡¶¨‡ßá‡¶¨‡¶ø", "‡¶ú‡¶æ‡¶®‡ßÅ", "‡¶¨‡¶ü", "hlw", "hi", "babe"
];

const autoReacts = ["‚ù§Ô∏è", "üòç", "üòò", "üòé", "ü•∞", "üòÇ", "üòá", "ü§ñ", "üòâ", "üî•", "üíã"];

module.exports = {
  config: {
    name: "bot",
    version: "1.8.0",
    author: "dipto|AHMED TARIF",
    role: 0,
    description: { en: "No prefix command with auto reaction & mention support." },
    category: "GROUP",
    guide: { en: "just type bby or reply to bot" },
  },

  onStart: async function () {},

  removePrefix(str, prefixes) {
    for (const prefix of prefixes) {
      if (str.startsWith(prefix)) return str.slice(prefix.length).trim();
    }
    return str;
  },

  // üí¨ When user replies to bot
  onReply: async function ({ api, event }) {
    if (!event.messageReply) return;
    let reply = (event.body || "").toLowerCase();
    reply = this.removePrefix(reply, prefixes) || "bby";

    try {
      const response = await axios.get(
        `${baseApiUrl()}/baby?text=${encodeURIComponent(reply)}&senderID=${event.senderID}&font=1`
      );
      const { reply: message, react } = response.data;

      // üß° Mention sender
      const userInfo = await api.getUserInfo(event.senderID);
      const userName = userInfo?.[event.senderID]?.name || "User";
      const mention = [{ tag: userName, id: event.senderID }];

      // üí´ Auto react (random)
      const randomReact = autoReacts[Math.floor(Math.random() * autoReacts.length)];
      setTimeout(() => api.setMessageReaction(randomReact, event.messageID, () => {}, true), 250);

      // If API gives custom react, override
      if (react) setTimeout(() => api.setMessageReaction(react, event.messageID, () => {}, true), 400);

      api.sendMessage(
        { body: `${message}`, mentions: mention },
        event.threadID,
        (err, info) => {
          if (!err) {
            global.GoatBot.onReply.set(info.messageID, {
              commandName: "bot",
              type: "reply",
              messageID: info.messageID,
              author: event.senderID,
              text: message,
            });
          }
        },
        event.messageID
      );
    } catch (err) {
      console.error(err.message);
      api.sendMessage("ü•π Error occurred while replying!", event.threadID, event.messageID);
    }
  },

  // üì© When user calls bot by prefix (bby, baby, etc.)
  onChat: async function ({ api, event }) {
    const commandName = module.exports.config.name;
    const tl = [
      "…¥·¥Ä·¥° ·¥ç·¥áss·¥Ä…¢ ·¥Ö·¥á·¥è /m.me/your.arafat.404",
      "ùóú ùóπùóºùòÉùó≤ ùòÜùóºùòÇ__üòòüòò",
      "ùóïùóØùòÜ ‡¶®‡¶æ ‡¶¨‡¶≤‡ßá ùóïùóºùòÑ ‡¶¨‡¶≤‡ßã___‚ù§‚Äçü©πüòò",
      "üç∫ ‡¶è‡¶á ‡¶®‡¶æ‡¶ì ‡¶ú‡ßÅ‡¶∏ ‡¶ñ‡¶æ‡¶ì..!ùóïùóØùòÜ ‡¶¨‡¶≤‡¶§‡ßá ‡¶¨‡¶≤‡¶§‡ßá ‡¶π‡¶æ‡¶™‡¶æ‡¶Ø‡¶º ‡¶ó‡ßá‡¶õ‡ßã ‡¶®‡¶æ ü•≤",
      "ùóïùó≤ùòÄùóµùó∂ ùó±ùóÆùó∏ùóπùó≤ ùóÆùó∫ùó∫ùòÇ ùóØùóºùó∏ùóÆ ùó±ùó≤ùóØùóÆ ùòÅùóº__ü•∫",
      "‡¶Ü‡¶ú‡¶ï‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡¶® ‡¶≠‡¶æ‡¶≤‡ßã ‡¶®‡ßá‡¶á__üôâ",
      "[‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà]100%",
    ];

    const rand = tl[Math.floor(Math.random() * tl.length)];
    let dipto = (event.body || "").toLowerCase();
    const words = dipto.split(" ");
    const count = words.length;

    if (!event.messageReply && prefixes.some(p => dipto.startsWith(p))) {
      if (event.senderID == api.getCurrentUserID()) return;

      // üíõ Fetch username for mention
      const userInfo = await api.getUserInfo(event.senderID);
      const userName = userInfo?.[event.senderID]?.name || "User";
      const mention = [{ tag: userName, id: event.senderID }];

      // ‚ú® Auto react random
      const randomReact = autoReacts[Math.floor(Math.random() * autoReacts.length)];
      setTimeout(() => api.setMessageReaction(randomReact, event.messageID, () => {}, true), 200);

      if (count === 1) {
        setTimeout(() => {
          api.sendMessage(
            { body: `${userName}, ${rand}`, mentions: mention },
            event.threadID,
            (err, info) => {
              if (!err) {
                global.GoatBot.onReply.set(info.messageID, {
                  commandName,
                  type: "reply",
                  messageID: info.messageID,
                  author: event.senderID,
                });
              }
            },
            event.messageID
          );
        }, 400);
      } else {
        words.shift();
        const oop = words.join(" ");
        try {
          const response = await axios.get(`${baseApiUrl()}/baby?text=${encodeURIComponent(oop)}&senderID=${event.senderID}&font=1`);
          const { reply: mg, react } = response.data;

          // üòç Auto random react
          const randomReact2 = autoReacts[Math.floor(Math.random() * autoReacts.length)];
          setTimeout(() => api.setMessageReaction(randomReact2, event.messageID, () => {}, true), 250);

          if (react)
            setTimeout(() => api.setMessageReaction(react, event.messageID, () => {}, true), 400);

          api.sendMessage(
            { body: `${mg}`, mentions: mention },
            event.threadID,
            (err, info) => {
              if (!err) {
                global.GoatBot.onReply.set(info.messageID, {
                  commandName,
                  type: "reply",
                  messageID: info.messageID,
                  author: event.senderID,
                });
              }
            },
            event.messageID
          );
        } catch (error) {
          console.error(error);
          api.sendMessage("‚ö†Ô∏è Error while contacting API", event.threadID, event.messageID);
        }
      }
    }
  },
};
